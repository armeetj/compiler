block_1:
    movq $777, %rax
    jmp conclusion

block_2:
    movq $42, %rax
    jmp conclusion

block_3:
    movq free_ptr(%rip), %r11
    addq $16, free_ptr(%rip)
    movq $3, 0(%r11)
    movq %r11, %rbx
    movq %rbx, %r11
    movq $0, 8(%r11)
    movq $0, -16(%rbp)
    cmpq %rbx, -8(%r15)
    je block_1
    jmp block_2

block_4:
    movq $0, %rbx
    jmp block_3

block_5:
    movq %r15, %rdi
    movq $16, %rsi
    callq collect
    jmp block_3

block_6:
    movq free_ptr(%rip), %r11
    addq $16, free_ptr(%rip)
    movq $3, 0(%r11)
    movq %r11, -8(%r15)
    movq -8(%r15), %r11
    movq $0, 8(%r11)
    movq $0, -16(%rbp)
    movq free_ptr(%rip), %rax
    movq %rax, -16(%rbp)
    addq $16, -16(%rbp)
    movq fromspace_end(%rip), %rax
    movq %rax, -24(%rbp)
    movq -24(%rbp), %rax
    cmpq %rax, -16(%rbp)
    jl block_4
    jmp block_5

block_7:
    movq $0, -8(%r15)
    jmp block_6

block_8:
    movq %r15, %rdi
    movq $16, %rsi
    callq collect
    jmp block_6

start:
    movq free_ptr(%rip), %rax
    movq %rax, -8(%r15)
    addq $16, -8(%r15)
    movq fromspace_end(%rip), %rax
    movq %rax, -16(%rbp)
    movq -16(%rbp), %rax
    cmpq %rax, -8(%r15)
    jl block_7
    jmp block_8

    .globl main

main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    movq $0, 0(%r15)
    addq $8, %r15
    jmp start

conclusion:
    subq $8, %r15
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq
