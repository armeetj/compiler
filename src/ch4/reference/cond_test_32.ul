(X86Program
  (Info1
    (locals_types
      (($tmp.1 Integer)
       (a.1 Integer)
       (b.1 Integer)
       (x.1 Integer))))
  (((Label block_1)
    (Block
      (Binfo2
        ((initial ((VarL x.1) (RegL Rsp)))
         (afters
           (((RegL Rsp) (RegL Rax))
            ((RegL Rsp) (RegL Rax))
            ()))))
      ((Movq (Var x.1) (Reg Rax))
       (Addq (Imm 10) (Reg Rax))
       (Jmp (Label conclusion)))))
   ((Label block_2)
    (Block
      (Binfo2
        ((initial ((VarL a.1) (RegL Rsp)))
         (afters
           (((VarL x.1) (RegL Rsp))
            ((VarL x.1) (RegL Rsp))
            ()))))
      ((Movq (Var a.1) (Var x.1))
       (Negq (Var x.1))
       (Jmp (Label block_1)))))
   ((Label block_3)
    (Block
      (Binfo2
        ((initial ((VarL b.1) (RegL Rsp)))
         (afters (((VarL x.1) (RegL Rsp)) ()))))
      ((Movq (Var b.1) (Var x.1))
       (Jmp (Label block_1)))))
   ((Label start)
    (Block
      (Binfo2
        ((initial ((RegL Rsp)))
         (afters
           (((VarL a.1) (RegL Rsp))
            ((VarL a.1) (VarL b.1) (RegL Rsp))
            ((VarL a.1)
             (VarL b.1)
             (RegL Rsp)
             (RegL Rax))
            ((VarL $tmp.1)
             (VarL a.1)
             (VarL b.1)
             (RegL Rsp))
            ((VarL a.1)
             (VarL b.1)
             (RegL Rsp)
             (RegL Rflags))
            ((VarL b.1) (RegL Rsp))
            ()))))
      ((Movq (Imm 1) (Var a.1))
       (Movq (Imm 2) (Var b.1))
       (Callq (Label read_int) 0)
       (Movq (Reg Rax) (Var $tmp.1))
       (Cmpq (Imm 0) (Var $tmp.1))
       (JmpIf CC_e (Label block_2))
       (Jmp (Label block_3)))))))
