block_1:
    movq free_ptr(%rip), %r11
    addq $16, free_ptr(%rip)
    movq $3, 0(%r11)
    movq %r11, %rcx
    movq $43, 8(%r11)
    movq $0, -32(%rbp)
    movq -8(%rbp), %rdi
    movq %rcx, %rsi
    callq *-24(%rbp)
    movq %rax, %rcx
    movq %rcx, %r11
    movq 8(%r11), %rax
    jmp main_conclusion

block_2:
    movq $0, %rcx
    jmp block_1

block_3:
    movq %r15, %rdi
    movq $16, %rsi
    callq collect
    jmp block_1

main_start:
    leaq map_vector(%rip), %rax
    movq %rax, -24(%rbp)
    leaq minus(%rip), %rax
    movq %rax, -8(%rbp)
    movq free_ptr(%rip), %rcx
    addq $16, %rcx
    movq fromspace_end(%rip), %rax
    movq %rax, -16(%rbp)
    cmpq -16(%rbp), %rcx
    jl block_2
    jmp block_3

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    subq $32, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    jmp main_start

main_conclusion:
    addq $32, %rsp
    popq %rbp
    retq

minus_start:
    movq %rdi, -8(%rbp)
    movq %rsi, %rcx
    negq %rcx
    movq -8(%rbp), %rax
    addq %rcx, %rax
    jmp minus_conclusion

    .globl minus
    .align 8

minus:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    jmp minus_start

minus_conclusion:
    addq $16, %rsp
    popq %rbp
    retq

block_4:
    movq free_ptr(%rip), %r11
    addq $16, free_ptr(%rip)
    movq $3, 0(%r11)
    movq %r11, -8(%r15)
    movq -8(%rbp), %rax
    movq %rax, 8(%r11)
    movq $0, %rcx
    movq -8(%r15), %rax
    jmp map_vector_conclusion

block_5:
    movq $0, %rcx
    jmp block_4

block_6:
    movq %r15, %rdi
    movq $16, %rsi
    callq collect
    jmp block_4

map_vector_start:
    movq %rdi, -8(%rbp)
    movq %rsi, %rcx
    movq %rcx, %r11
    movq 8(%r11), %rcx
    movq %rcx, %rdi
    movq $1, %rsi
    callq *-8(%rbp)
    movq %rax, -8(%rbp)
    movq free_ptr(%rip), %rcx
    addq $16, %rcx
    movq fromspace_end(%rip), %rax
    movq %rax, -16(%rbp)
    cmpq -16(%rbp), %rcx
    jl block_5
    jmp block_6

    .globl map_vector
    .align 8

map_vector:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    movq $0, 0(%r15)
    addq $8, %r15
    jmp map_vector_start

map_vector_conclusion:
    subq $8, %r15
    addq $16, %rsp
    popq %rbp
    retq
