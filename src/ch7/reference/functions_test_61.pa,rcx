block_1:
    movq free_ptr(%rip), %r11
    addq $24, free_ptr(%rip)
    movq $5, 0(%r11)
    movq %r11, -8(%r15)
    movq $1, 8(%r11)
    movq $0, %rcx
    movq -8(%r15), %r11
    movq $0, 16(%r11)
    movq $0, %rcx
    movq $0, %rdi
    movq $0, %rsi
    movq $0, %rdx
    movq $0, %rcx
    movq $0, %r8
    movq -8(%r15), %r9
    movq -16(%rbp), %rax
    subq $8, %r15
    addq $16, %rsp
    popq %rbp
    jmp *%rax

block_2:
    movq $0, %rcx
    jmp block_1

block_3:
    movq %r15, %rdi
    movq $24, %rsi
    callq collect
    jmp block_1

main_start:
    leaq h(%rip), %rax
    movq %rax, -16(%rbp)
    movq free_ptr(%rip), %rax
    movq %rax, -8(%r15)
    addq $24, -8(%r15)
    movq fromspace_end(%rip), %rax
    movq %rax, -8(%rbp)
    cmpq %rax, -8(%r15)
    jl block_2
    jmp block_3

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    movq $0, 0(%r15)
    addq $8, %r15
    jmp main_start

main_conclusion:
    subq $8, %r15
    addq $16, %rsp
    popq %rbp
    retq

h_start:
    movq %rdi, -16(%rbp)
    movq %rsi, -24(%rbp)
    movq %rdx, -32(%rbp)
    movq %rcx, -40(%rbp)
    movq %r8, -48(%rbp)
    movq %r9, -8(%rbp)
    movq -8(%rbp), %r11
    movq 8(%r11), %rcx
    movq -8(%rbp), %r11
    movq 16(%r11), %rax
    movq %rax, -8(%rbp)
    addq -8(%rbp), %rcx
    movq -48(%rbp), %rax
    movq %rax, -8(%rbp)
    addq %rcx, -8(%rbp)
    movq -40(%rbp), %rcx
    addq -8(%rbp), %rcx
    movq -32(%rbp), %rax
    movq %rax, -8(%rbp)
    addq %rcx, -8(%rbp)
    movq -24(%rbp), %rcx
    addq -8(%rbp), %rcx
    movq -16(%rbp), %rax
    addq %rcx, %rax
    jmp h_conclusion

    .globl h
    .align 8

h:
    pushq %rbp
    movq %rsp, %rbp
    subq $48, %rsp
    jmp h_start

h_conclusion:
    addq $48, %rsp
    popq %rbp
    retq
