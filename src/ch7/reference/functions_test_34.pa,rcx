block_1:
    movq $999, %rax
    jmp main_conclusion

block_2:
    movq $42, %rax
    jmp main_conclusion

block_3:
    movq free_ptr(%rip), %r11
    addq $16, free_ptr(%rip)
    movq $3, 0(%r11)
    movq %r11, -8(%r15)
    movq -8(%rbp), %rax
    movq %rax, 8(%r11)
    movq $0, %rcx
    leaq even?(%rip), %rax
    movq %rax, -8(%rbp)
    movq -8(%r15), %r11
    movq -8(%rbp), %rax
    movq %rax, 8(%r11)
    movq $0, %rcx
    movq -8(%r15), %r11
    movq 8(%r11), %rcx
    movq $21, %rdi
    callq *%rcx
    movq %rax, %rcx
    cmpq $1, %rcx
    je block_1
    jmp block_2

block_4:
    movq $0, %rcx
    jmp block_3

block_5:
    movq %r15, %rdi
    movq $16, %rsi
    callq collect
    jmp block_3

main_start:
    leaq odd?(%rip), %rax
    movq %rax, -8(%rbp)
    movq free_ptr(%rip), %rcx
    addq $16, %rcx
    movq fromspace_end(%rip), %rax
    movq %rax, -16(%rbp)
    cmpq -16(%rbp), %rcx
    jl block_4
    jmp block_5

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    movq $0, 0(%r15)
    addq $8, %r15
    jmp main_start

main_conclusion:
    subq $8, %r15
    addq $16, %rsp
    popq %rbp
    retq

block_6:
    movq $1, %rax
    jmp even?_conclusion

block_7:
    leaq odd?(%rip), %rax
    movq %rax, -16(%rbp)
    movq $1, -8(%rbp)
    negq -8(%rbp)
    addq %rcx, -8(%rbp)
    movq -8(%rbp), %rdi
    movq -16(%rbp), %rax
    addq $16, %rsp
    popq %rbp
    jmp *%rax

even?_start:
    movq %rdi, %rcx
    cmpq $0, %rcx
    je block_6
    jmp block_7

    .globl even?
    .align 8

even?:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    jmp even?_start

even?_conclusion:
    addq $16, %rsp
    popq %rbp
    retq

block_8:
    movq $0, %rax
    jmp odd?_conclusion

block_9:
    leaq even?(%rip), %rax
    movq %rax, -16(%rbp)
    movq $1, -8(%rbp)
    negq -8(%rbp)
    addq %rcx, -8(%rbp)
    movq -8(%rbp), %rdi
    movq -16(%rbp), %rax
    addq $16, %rsp
    popq %rbp
    jmp *%rax

odd?_start:
    movq %rdi, %rcx
    cmpq $0, %rcx
    je block_8
    jmp block_9

    .globl odd?
    .align 8

odd?:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    jmp odd?_start

odd?_conclusion:
    addq $16, %rsp
    popq %rbp
    retq
