main_start:
    leaq factorial(%rip), %rbx
    movq $0, %rdi
    callq *%rbx
    movq %rax, -48(%rbp)
    leaq factorial(%rip), %rbx
    movq $1, %rdi
    callq *%rbx
    movq %rax, -40(%rbp)
    leaq factorial(%rip), %rbx
    movq $2, %rdi
    callq *%rbx
    movq %rax, -56(%rbp)
    leaq factorial(%rip), %rbx
    movq $3, %rdi
    callq *%rbx
    movq %rax, -32(%rbp)
    leaq factorial(%rip), %rbx
    movq $4, %rdi
    callq *%rbx
    movq %rax, %rbx
    leaq factorial(%rip), %rax
    movq %rax, -16(%rbp)
    movq $5, %rdi
    callq *-16(%rbp)
    movq %rax, -24(%rbp)
    addq -24(%rbp), %rbx
    addq %rbx, -32(%rbp)
    movq -56(%rbp), %rbx
    addq -32(%rbp), %rbx
    addq %rbx, -40(%rbp)
    movq -48(%rbp), %rax
    addq -40(%rbp), %rax
    jmp main_conclusion

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $56, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    jmp main_start

main_conclusion:
    addq $56, %rsp
    popq %rbx
    popq %rbp
    retq

block_1:
    movq $0, %rax
    jmp mult_conclusion

block_2:
    leaq mult(%rip), %rax
    movq %rax, -24(%rbp)
    movq $1, -16(%rbp)
    negq -16(%rbp)
    movq -32(%rbp), %rax
    addq %rax, -16(%rbp)
    movq -16(%rbp), %rdi
    movq %rbx, %rsi
    callq *-24(%rbp)
    movq %rax, -32(%rbp)
    movq %rbx, %rax
    addq -32(%rbp), %rax
    jmp mult_conclusion

mult_start:
    movq %rdi, -32(%rbp)
    movq %rsi, %rbx
    movq $0, %rax
    cmpq -32(%rbp), %rax
    je block_1
    jmp block_2

    .globl mult
    .align 8

mult:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    jmp mult_start

mult_conclusion:
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq

block_3:
    movq -32(%rbp), %rax
    jmp factorial_iter_conclusion

block_4:
    leaq factorial_iter(%rip), %rax
    movq %rax, -40(%rbp)
    movq %rbx, -16(%rbp)
    subq $1, -16(%rbp)
    leaq mult(%rip), %rax
    movq %rax, -24(%rbp)
    movq %rbx, %rdi
    movq -32(%rbp), %rsi
    callq *-24(%rbp)
    movq %rax, -32(%rbp)
    movq -16(%rbp), %rdi
    movq -32(%rbp), %rsi
    movq -40(%rbp), %rax
    addq $40, %rsp
    popq %rbx
    popq %rbp
    jmp *%rax

factorial_iter_start:
    movq %rdi, %rbx
    movq %rsi, -32(%rbp)
    cmpq $0, %rbx
    je block_3
    jmp block_4

    .globl factorial_iter
    .align 8

factorial_iter:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $40, %rsp
    jmp factorial_iter_start

factorial_iter_conclusion:
    addq $40, %rsp
    popq %rbx
    popq %rbp
    retq

factorial_start:
    movq %rdi, -16(%rbp)
    leaq factorial_iter(%rip), %rbx
    movq -16(%rbp), %rdi
    movq $1, %rsi
    movq %rbx, %rax
    addq $8, %rsp
    popq %rbx
    popq %rbp
    jmp *%rax

    .globl factorial
    .align 8

factorial:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $8, %rsp
    jmp factorial_start

factorial_conclusion:
    addq $8, %rsp
    popq %rbx
    popq %rbp
    retq
