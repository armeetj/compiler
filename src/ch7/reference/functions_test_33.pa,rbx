block_1:
    movq $999, %rax
    jmp main_conclusion

block_2:
    movq $42, %rax
    jmp main_conclusion

main_start:
    leaq even?(%rip), %rbx
    callq read_int
    movq %rax, -16(%rbp)
    movq -16(%rbp), %rdi
    callq *%rbx
    movq %rax, %rbx
    cmpq $1, %rbx
    je block_1
    jmp block_2

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $8, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    jmp main_start

main_conclusion:
    addq $8, %rsp
    popq %rbx
    popq %rbp
    retq

block_3:
    movq $1, %rax
    jmp even?_conclusion

block_4:
    leaq odd?(%rip), %rax
    movq %rax, -24(%rbp)
    movq $1, -16(%rbp)
    negq -16(%rbp)
    addq %rbx, -16(%rbp)
    movq -16(%rbp), %rdi
    movq -24(%rbp), %rax
    addq $24, %rsp
    popq %rbx
    popq %rbp
    jmp *%rax

even?_start:
    movq %rdi, %rbx
    cmpq $0, %rbx
    je block_3
    jmp block_4

    .globl even?
    .align 8

even?:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    jmp even?_start

even?_conclusion:
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq

block_5:
    movq $0, %rax
    jmp odd?_conclusion

block_6:
    leaq even?(%rip), %rax
    movq %rax, -24(%rbp)
    movq $1, -16(%rbp)
    negq -16(%rbp)
    addq %rbx, -16(%rbp)
    movq -16(%rbp), %rdi
    movq -24(%rbp), %rax
    addq $24, %rsp
    popq %rbx
    popq %rbp
    jmp *%rax

odd?_start:
    movq %rdi, %rbx
    cmpq $0, %rbx
    je block_5
    jmp block_6

    .globl odd?
    .align 8

odd?:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    jmp odd?_start

odd?_conclusion:
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq
