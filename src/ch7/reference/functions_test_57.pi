(X86Program
  ((Def
     (Label main)
     (Finfo
       (num_spilled 1)
       (num_spilled_root 0)
       (used_callee (Rbx R12 R13 R14)))
     ((nparams 0)
      (locals
        (($tmp.1 (Function (Integer) Integer))
         ($tmp.10 Integer)
         ($tmp.11 (Function (Integer) Integer))
         ($tmp.12 Integer)
         ($tmp.13 Integer)
         ($tmp.14 Integer)
         ($tmp.15 Integer)
         ($tmp.16 Integer)
         ($tmp.2 Integer)
         ($tmp.3 (Function (Integer) Integer))
         ($tmp.4 Integer)
         ($tmp.5 (Function (Integer) Integer))
         ($tmp.6 Integer)
         ($tmp.7 (Function (Integer) Integer))
         ($tmp.8 Integer)
         ($tmp.9 (Function (Integer) Integer))
         (factorial (Function (Integer) Integer))))
      (body
        (((Label main_start)
          (Block
            ((Leaq
               (GlobalArg (Label factorial))
               (Reg Rcx))
             (Movq (Imm 0) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Reg R12))
             (Leaq
               (GlobalArg (Label factorial))
               (Reg Rcx))
             (Movq (Imm 1) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Reg R13))
             (Leaq
               (GlobalArg (Label factorial))
               (Reg Rcx))
             (Movq (Imm 2) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Reg R14))
             (Leaq
               (GlobalArg (Label factorial))
               (Reg Rcx))
             (Movq (Imm 3) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Deref Rbp -8))
             (Leaq
               (GlobalArg (Label factorial))
               (Reg Rcx))
             (Movq (Imm 4) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Reg Rbx))
             (Leaq
               (GlobalArg (Label factorial))
               (Reg Rcx))
             (Movq (Imm 5) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Reg Rcx))
             (Movq (Reg Rbx) (Reg Rdx))
             (Addq (Reg Rcx) (Reg Rdx))
             (Movq (Deref Rbp -8) (Reg Rcx))
             (Addq (Reg Rdx) (Reg Rcx))
             (Movq (Reg R14) (Reg Rdx))
             (Addq (Reg Rcx) (Reg Rdx))
             (Movq (Reg R13) (Reg Rcx))
             (Addq (Reg Rdx) (Reg Rcx))
             (Movq (Reg R12) (Reg Rax))
             (Addq (Reg Rcx) (Reg Rax))
             (Jmp (Label main_conclusion)))))))))
   (Def
     (Label mult)
     (Finfo
       (num_spilled 0)
       (num_spilled_root 0)
       (used_callee (Rbx)))
     ((nparams 2)
      (locals
        ((x.1 Integer)
         (y.1 Integer)
         ($tmp.17 Integer)
         ($tmp.18 Integer)
         ($tmp.19
           (Function (Integer Integer) Integer))
         ($tmp.20 Integer)
         (mult
           (Function (Integer Integer) Integer))
         (x.1 Integer)
         (y.1 Integer)))
      (body
        (((Label block_1)
          (Block
            ((Movq (Imm 0) (Reg Rax))
             (Jmp (Label mult_conclusion)))))
         ((Label block_2)
          (Block
            ((Leaq
               (GlobalArg (Label mult))
               (Reg Rcx))
             (Movq (Imm 1) (Reg Rsi))
             (Negq (Reg Rsi))
             (Addq (Reg Rdx) (Reg Rsi))
             (Movq (Reg Rsi) (Reg Rdi))
             (Movq (Reg Rbx) (Reg Rsi))
             (IndirectCallq (Reg Rcx) 2)
             (Movq (Reg Rax) (Reg Rcx))
             (Movq (Reg Rbx) (Reg Rax))
             (Addq (Reg Rcx) (Reg Rax))
             (Jmp (Label mult_conclusion)))))
         ((Label mult_start)
          (Block
            ((Movq (Reg Rdi) (Reg Rdx))
             (Movq (Reg Rsi) (Reg Rbx))
             (Movq (Imm 0) (Reg Rax))
             (Cmpq (Reg Rdx) (Reg Rax))
             (JmpIf CC_e (Label block_1))
             (Jmp (Label block_2)))))))))
   (Def
     (Label factorial_iter)
     (Finfo
       (num_spilled 0)
       (num_spilled_root 0)
       (used_callee (Rbx R12)))
     ((nparams 2)
      (locals
        ((n.1 Integer)
         (r.1 Integer)
         ($tmp.21 Integer)
         ($tmp.22
           (Function (Integer Integer) Integer))
         ($tmp.23 Integer)
         ($tmp.24
           (Function (Integer Integer) Integer))
         (factorial_iter
           (Function (Integer Integer) Integer))
         (mult
           (Function (Integer Integer) Integer))
         (n.1 Integer)
         (r.1 Integer)))
      (body
        (((Label block_3)
          (Block
            ((Movq (Reg Rdx) (Reg Rax))
             (Jmp (Label factorial_iter_conclusion)))))
         ((Label block_4)
          (Block
            ((Leaq
               (GlobalArg (Label factorial_iter))
               (Reg R12))
             (Movq (Reg Rcx) (Reg Rbx))
             (Subq (Imm 1) (Reg Rbx))
             (Leaq (GlobalArg (Label mult)) (Reg R8))
             (Movq (Reg Rcx) (Reg Rdi))
             (Movq (Reg Rdx) (Reg Rsi))
             (IndirectCallq (Reg R8) 2)
             (Movq (Reg Rax) (Reg Rcx))
             (Movq (Reg Rbx) (Reg Rdi))
             (Movq (Reg Rcx) (Reg Rsi))
             (Movq (Reg R12) (Reg Rax))
             (TailJmp (Reg Rax) 2))))
         ((Label factorial_iter_start)
          (Block
            ((Movq (Reg Rdi) (Reg Rcx))
             (Movq (Reg Rsi) (Reg Rdx))
             (Cmpq (Imm 0) (Reg Rcx))
             (JmpIf CC_e (Label block_3))
             (Jmp (Label block_4)))))))))
   (Def
     (Label factorial)
     (Finfo
       (num_spilled 0)
       (num_spilled_root 0)
       (used_callee ()))
     ((nparams 1)
      (locals
        ((n.2 Integer)
         ($tmp.25
           (Function (Integer Integer) Integer))
         (factorial_iter
           (Function (Integer Integer) Integer))
         (n.2 Integer)))
      (body
        (((Label factorial_start)
          (Block
            ((Movq (Reg Rdi) (Reg Rdx))
             (Leaq
               (GlobalArg (Label factorial_iter))
               (Reg Rcx))
             (Movq (Reg Rdx) (Reg Rdi))
             (Movq (Imm 1) (Reg Rsi))
             (Movq (Reg Rcx) (Reg Rax))
             (TailJmp (Reg Rax) 2))))))))))
