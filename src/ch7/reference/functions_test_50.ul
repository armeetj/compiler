(X86Program
  ((Def
     (Label main)
     Finfo1
     ((nparams 0)
      (locals
        (($tmp.1 (Function (Integer) Integer))
         ($tmp.2 Integer)
         ($tmp.3
           (Function
             ((Function (Integer) Integer) Integer)
             Integer))
         (add1 (Function (Integer) Integer))
         (twice
           (Function
             ((Function (Integer) Integer) Integer)
             Integer))))
      (body
        (((Label main_start)
          (Block
            (Binfo2
              ((initial ())
               (afters
                 (((VarL $tmp.3))
                  ((VarL $tmp.1) (VarL $tmp.3))
                  ((VarL $tmp.1) (VarL $tmp.3) (RegL Rax))
                  ((VarL $tmp.1)
                   (VarL $tmp.2)
                   (VarL $tmp.3))
                  ((VarL $tmp.2) (VarL $tmp.3) (RegL Rdi))
                  ((VarL $tmp.3) (RegL Rsi) (RegL Rdi))
                  ()))))
            ((Leaq
               (GlobalArg (Label twice))
               (Var $tmp.3))
             (Leaq
               (GlobalArg (Label add1))
               (Var $tmp.1))
             (Callq (Label read_int) 0)
             (Movq (Reg Rax) (Var $tmp.2))
             (Movq (Var $tmp.1) (Reg Rdi))
             (Movq (Var $tmp.2) (Reg Rsi))
             (TailJmp (Var $tmp.3) 2))))))))
   (Def
     (Label add1)
     Finfo1
     ((nparams 1)
      (locals ((y.1 Integer) (y.1 Integer)))
      (body
        (((Label add1_start)
          (Block
            (Binfo2
              ((initial ((RegL Rsp) (RegL Rdi)))
               (afters
                 (((VarL y.1) (RegL Rsp))
                  ((VarL y.1) (RegL Rsp) (RegL Rax))
                  ((RegL Rsp) (RegL Rax))
                  ()))))
            ((Movq (Reg Rdi) (Var y.1))
             (Movq (Imm 1) (Reg Rax))
             (Addq (Var y.1) (Reg Rax))
             (Jmp (Label add1_conclusion)))))))))
   (Def
     (Label twice)
     Finfo1
     ((nparams 2)
      (locals
        ((f.1 (Function (Integer) Integer))
         (x.1 Integer)
         ($tmp.4 Integer)
         ($tmp.5 Integer)
         (f.1 (Function (Integer) Integer))
         (x.1 Integer)))
      (body
        (((Label twice_start)
          (Block
            (Binfo2
              ((initial
                 ((RegL Rsp) (RegL Rsi) (RegL Rdi)))
               (afters
                 (((VarL f.1) (RegL Rsp) (RegL Rsi))
                  ((VarL f.1) (VarL x.1) (RegL Rsp))
                  ((VarL f.1)
                   (VarL x.1)
                   (RegL Rsp)
                   (RegL Rdi))
                  ((VarL f.1)
                   (VarL x.1)
                   (RegL Rsp)
                   (RegL Rax))
                  ((VarL $tmp.4)
                   (VarL f.1)
                   (VarL x.1)
                   (RegL Rsp))
                  ((VarL $tmp.4)
                   (VarL f.1)
                   (RegL Rsp)
                   (RegL Rdi))
                  ((VarL $tmp.4) (RegL Rsp) (RegL Rax))
                  ((VarL $tmp.4) (VarL $tmp.5) (RegL Rsp))
                  ((VarL $tmp.5) (RegL Rsp) (RegL Rax))
                  ((RegL Rsp) (RegL Rax))
                  ()))))
            ((Movq (Reg Rdi) (Var f.1))
             (Movq (Reg Rsi) (Var x.1))
             (Movq (Var x.1) (Reg Rdi))
             (IndirectCallq (Var f.1) 1)
             (Movq (Reg Rax) (Var $tmp.4))
             (Movq (Var x.1) (Reg Rdi))
             (IndirectCallq (Var f.1) 1)
             (Movq (Reg Rax) (Var $tmp.5))
             (Movq (Var $tmp.4) (Reg Rax))
             (Addq (Var $tmp.5) (Reg Rax))
             (Jmp (Label twice_conclusion)))))))))))
