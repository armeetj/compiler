block_1:
    movq free_ptr(%rip), %r11
    addq $48, free_ptr(%rip)
    movq $11, 0(%r11)
    movq %r11, -8(%r15)
    movq $6, 8(%r11)
    movq $0, %rcx
    movq -8(%r15), %r11
    movq $7, 16(%r11)
    movq $0, %rcx
    movq -8(%r15), %r11
    movq $8, 24(%r11)
    movq $0, %rcx
    movq -8(%r15), %r11
    movq $9, 32(%r11)
    movq $0, %rcx
    movq -8(%r15), %r11
    movq $22, 40(%r11)
    movq $0, %rcx
    movq $1, %rdi
    movq $2, %rsi
    movq $3, %rdx
    movq $20, %rcx
    movq $5, %r8
    movq -8(%r15), %r9
    movq -16(%rbp), %rax
    subq $8, %r15
    addq $16, %rsp
    popq %rbp
    jmp *%rax

block_2:
    movq $0, %rcx
    jmp block_1

block_3:
    movq %r15, %rdi
    movq $48, %rsi
    callq collect
    jmp block_1

main_start:
    leaq big(%rip), %rax
    movq %rax, -16(%rbp)
    movq free_ptr(%rip), %rax
    movq %rax, -8(%r15)
    addq $48, -8(%r15)
    movq fromspace_end(%rip), %rax
    movq %rax, -8(%rbp)
    cmpq %rax, -8(%r15)
    jl block_2
    jmp block_3

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    movq $0, 0(%r15)
    addq $8, %r15
    jmp main_start

main_conclusion:
    subq $8, %r15
    addq $16, %rsp
    popq %rbp
    retq

big_start:
    movq %rdi, -8(%rbp)
    movq %rsi, -8(%rbp)
    movq %rdx, -8(%rbp)
    movq %rcx, -8(%rbp)
    movq %r8, %rcx
    movq %r9, %rcx
    movq %rcx, %r11
    movq 40(%r11), %rcx
    movq -8(%rbp), %rax
    addq %rcx, %rax
    jmp big_conclusion

    .globl big
    .align 8

big:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    jmp big_start

big_conclusion:
    addq $16, %rsp
    popq %rbp
    retq
