block_1:
    movq %rcx, -40(%rbp)
    movq -24(%rbp), %rax
    addq %rax, -40(%rbp)
    movq -40(%rbp), %rax
    addq %rax, -16(%rbp)
    addq $1, -24(%rbp)
    jmp loop_2

block_2:
    addq $1, %rcx
    jmp loop_1

block_3:
    movq $1, -24(%rbp)
    jmp loop_2

block_4:
    movq -16(%rbp), %rax
    jmp conclusion

loop_1:
    cmpq -8(%rbp), %rcx
    jle block_3
    jmp block_4

loop_2:
    movq -32(%rbp), %rax
    cmpq %rax, -24(%rbp)
    jle block_1
    jmp block_2

start:
    movq $0, -16(%rbp)
    callq read_int
    movq %rax, -8(%rbp)
    callq read_int
    movq %rax, -32(%rbp)
    movq $1, %rcx
    jmp loop_1

    .globl main

main:
    pushq %rbp
    movq %rsp, %rbp
    subq $48, %rsp
    jmp start

conclusion:
    addq $48, %rsp
    popq %rbp
    retq
