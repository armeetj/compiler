block_1:
    movq free_ptr(%rip), %r11
    addq $40, free_ptr(%rip)
    movq $9, 0(%r11)
    movq %r11, -8(%r15)
    movq $6, 8(%r11)
    movq $0, -16(%rbp)
    movq -8(%r15), %r11
    movq $7, 16(%r11)
    movq $0, -16(%rbp)
    movq -8(%r15), %r11
    movq $8, 24(%r11)
    movq $0, -16(%rbp)
    movq -8(%r15), %r11
    movq $142, 32(%r11)
    movq $0, -16(%rbp)
    movq $100, %rdi
    movq $2, %rsi
    movq $3, %rdx
    movq $4, %rcx
    movq $5, %r8
    movq -8(%r15), %r9
    movq %rbx, %rax
    subq $8, %r15
    addq $24, %rsp
    popq %rbx
    popq %rbp
    jmp *%rax

block_2:
    movq $0, -8(%r15)
    jmp block_1

block_3:
    movq %r15, %rdi
    movq $40, %rsi
    callq collect
    jmp block_1

main_start:
    leaq foo(%rip), %rbx
    movq free_ptr(%rip), %rax
    movq %rax, -16(%rbp)
    addq $40, -16(%rbp)
    movq fromspace_end(%rip), %rax
    movq %rax, -24(%rbp)
    cmpq %rax, -16(%rbp)
    jl block_2
    jmp block_3

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    movq $0, 0(%r15)
    addq $8, %r15
    jmp main_start

main_conclusion:
    subq $8, %r15
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq

block_4:
    movq free_ptr(%rip), %r11
    addq $40, free_ptr(%rip)
    movq $9, 0(%r11)
    movq %r11, -8(%r15)
    movq -16(%rbp), %rax
    movq %rax, 8(%r11)
    movq $0, -16(%rbp)
    movq -8(%r15), %r11
    movq -24(%rbp), %rax
    movq %rax, 16(%r11)
    movq $0, -16(%rbp)
    movq -8(%r15), %r11
    movq -32(%rbp), %rax
    movq %rax, 24(%r11)
    movq $0, -16(%rbp)
    movq -8(%r15), %r11
    movq -40(%rbp), %rax
    movq %rax, 32(%r11)
    movq $0, -16(%rbp)
    movq -72(%rbp), %rdi
    movq %rbx, %rsi
    movq -80(%rbp), %rdx
    movq -88(%rbp), %rcx
    movq -96(%rbp), %r8
    movq -8(%r15), %r9
    movq -64(%rbp), %rax
    subq $8, %r15
    addq $88, %rsp
    popq %rbx
    popq %rbp
    jmp *%rax

block_5:
    movq $0, -48(%rbp)
    jmp block_4

block_6:
    movq %r15, %rdi
    movq $40, %rsi
    callq collect
    jmp block_4

block_7:
    movq -40(%rbp), %r11
    movq 32(%r11), %rax
    jmp foo_conclusion

block_8:
    leaq foo(%rip), %rax
    movq %rax, -64(%rbp)
    movq $1, -24(%rbp)
    negq -24(%rbp)
    movq -16(%rbp), %rax
    movq %rax, -72(%rbp)
    movq -24(%rbp), %rax
    addq %rax, -72(%rbp)
    movq -40(%rbp), %r11
    movq 8(%r11), %rax
    movq %rax, -16(%rbp)
    movq -40(%rbp), %r11
    movq 16(%r11), %rax
    movq %rax, -24(%rbp)
    movq -40(%rbp), %r11
    movq 24(%r11), %rax
    movq %rax, -32(%rbp)
    movq -40(%rbp), %r11
    movq 32(%r11), %rax
    movq %rax, -40(%rbp)
    movq $1, -48(%rbp)
    negq -48(%rbp)
    movq -48(%rbp), %rax
    addq %rax, -40(%rbp)
    movq free_ptr(%rip), %rax
    movq %rax, -48(%rbp)
    addq $40, -48(%rbp)
    movq fromspace_end(%rip), %rax
    movq %rax, -56(%rbp)
    cmpq %rax, -48(%rbp)
    jl block_5
    jmp block_6

foo_start:
    movq %rdi, -16(%rbp)
    movq %rsi, %rbx
    movq %rdx, -80(%rbp)
    movq %rcx, -88(%rbp)
    movq %r8, -96(%rbp)
    movq %r9, -40(%rbp)
    movq $0, %rax
    cmpq -16(%rbp), %rax
    je block_7
    jmp block_8

    .globl foo
    .align 8

foo:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $88, %rsp
    movq $0, 0(%r15)
    addq $8, %r15
    jmp foo_start

foo_conclusion:
    subq $8, %r15
    addq $88, %rsp
    popq %rbx
    popq %rbp
    retq
