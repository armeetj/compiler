(X86Program
  ((Def
     (Label main)
     (Finfo
       (num_spilled 0)
       (num_spilled_root 0)
       (used_callee (Rbx)))
     ((nparams 0)
      (locals
        (($tmp.1 (Function (Integer) Integer))
         ($tmp.2 Integer)
         ($tmp.3
           (Function
             (Integer Integer Integer)
             Integer))
         ($tmp.4 Integer)
         (f (Function (Integer) Integer))
         (g
           (Function
             (Integer Integer Integer)
             Integer))))
      (body
        (((Label main_start)
          (Block
            ((Leaq (GlobalArg (Label f)) (Reg Rcx))
             (Movq (Imm 8) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Reg Rbx))
             (Leaq (GlobalArg (Label g)) (Reg Rcx))
             (Movq (Imm 8) (Reg Rdi))
             (Movq (Imm 0) (Reg Rsi))
             (Movq (Imm 1) (Reg Rdx))
             (IndirectCallq (Reg Rcx) 3)
             (Movq (Reg Rax) (Reg Rcx))
             (Movq (Reg Rbx) (Reg Rax))
             (Addq (Reg Rcx) (Reg Rax))
             (Jmp (Label main_conclusion)))))))))
   (Def
     (Label f)
     (Finfo
       (num_spilled 0)
       (num_spilled_root 0)
       (used_callee (Rbx R12)))
     ((nparams 1)
      (locals
        ((x.1 Integer)
         ($tmp.10 Integer)
         ($tmp.5 Integer)
         ($tmp.6 (Function (Integer) Integer))
         ($tmp.7 Integer)
         ($tmp.8 Integer)
         ($tmp.9 (Function (Integer) Integer))
         (f (Function (Integer) Integer))
         (x.1 Integer)))
      (body
        (((Label block_1)
          (Block
            ((Movq (Imm 1) (Reg Rax))
             (Jmp (Label f_conclusion)))))
         ((Label block_2)
          (Block
            ((Leaq (GlobalArg (Label f)) (Reg Rcx))
             (Movq (Reg Rbx) (Reg Rdx))
             (Subq (Imm 1) (Reg Rdx))
             (Movq (Reg Rdx) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Reg R12))
             (Leaq (GlobalArg (Label f)) (Reg Rcx))
             (Movq (Reg Rbx) (Reg Rdx))
             (Subq (Imm 2) (Reg Rdx))
             (Movq (Reg Rdx) (Reg Rdi))
             (IndirectCallq (Reg Rcx) 1)
             (Movq (Reg Rax) (Reg Rcx))
             (Movq (Reg R12) (Reg Rax))
             (Addq (Reg Rcx) (Reg Rax))
             (Jmp (Label f_conclusion)))))
         ((Label block_3)
          (Block
            ((Movq (Imm 0) (Reg Rax))
             (Jmp (Label f_conclusion)))))
         ((Label block_4)
          (Block
            ((Cmpq (Imm 1) (Reg Rbx))
             (JmpIf CC_e (Label block_1))
             (Jmp (Label block_2)))))
         ((Label f_start)
          (Block
            ((Movq (Reg Rdi) (Reg Rbx))
             (Cmpq (Imm 0) (Reg Rbx))
             (JmpIf CC_e (Label block_3))
             (Jmp (Label block_4)))))))))
   (Def
     (Label g)
     (Finfo
       (num_spilled 0)
       (num_spilled_root 0)
       (used_callee ()))
     ((nparams 3)
      (locals
        ((x.2 Integer)
         (y.1 Integer)
         (z.1 Integer)
         ($tmp.11 Integer)
         ($tmp.12 Integer)
         ($tmp.13
           (Function
             (Integer Integer Integer)
             Integer))
         (g
           (Function
             (Integer Integer Integer)
             Integer))
         (x.2 Integer)
         (y.1 Integer)
         (z.1 Integer)))
      (body
        (((Label block_5)
          (Block
            ((Movq (Reg Rdx) (Reg Rax))
             (Jmp (Label g_conclusion)))))
         ((Label block_6)
          (Block
            ((Leaq (GlobalArg (Label g)) (Reg R8))
             (Movq (Reg Rcx) (Reg Rdi))
             (Subq (Imm 1) (Reg Rdi))
             (Movq (Reg Rsi) (Reg Rcx))
             (Addq (Reg Rdx) (Reg Rcx))
             (Movq (Reg Rdx) (Reg Rsi))
             (Movq (Reg Rcx) (Reg Rdx))
             (Movq (Reg R8) (Reg Rax))
             (TailJmp (Reg Rax) 3))))
         ((Label block_7)
          (Block
            ((Movq (Reg Rsi) (Reg Rax))
             (Jmp (Label g_conclusion)))))
         ((Label block_8)
          (Block
            ((Cmpq (Imm 1) (Reg Rcx))
             (JmpIf CC_e (Label block_5))
             (Jmp (Label block_6)))))
         ((Label g_start)
          (Block
            ((Movq (Reg Rdi) (Reg Rcx))
             (Cmpq (Imm 0) (Reg Rcx))
             (JmpIf CC_e (Label block_7))
             (Jmp (Label block_8)))))))))))
