main_start:
    leaq triple(%rip), %rax
    movq %rax, -16(%rbp)
    movq $13, %rdi
    callq *-16(%rbp)
    movq %rax, -24(%rbp)
    movq -24(%rbp), %r11
    movq 8(%r11), %rax
    movq %rax, -16(%rbp)
    movq -24(%rbp), %r11
    movq 16(%r11), %rbx
    movq -24(%rbp), %r11
    movq 24(%r11), %rax
    movq %rax, -24(%rbp)
    addq $3, -24(%rbp)
    addq -24(%rbp), %rbx
    movq -16(%rbp), %rax
    addq %rbx, %rax
    jmp main_conclusion

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    jmp main_start

main_conclusion:
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq

block_1:
    movq free_ptr(%rip), %r11
    addq $32, free_ptr(%rip)
    movq $7, 0(%r11)
    movq %r11, -8(%r15)
    movq %rbx, 8(%r11)
    movq $0, -24(%rbp)
    movq -8(%r15), %r11
    movq %rbx, 16(%r11)
    movq $0, -24(%rbp)
    movq -8(%r15), %r11
    movq %rbx, 24(%r11)
    movq $0, %rbx
    movq -8(%r15), %rax
    jmp triple_conclusion

block_2:
    movq $0, -8(%r15)
    jmp block_1

block_3:
    movq %r15, %rdi
    movq $32, %rsi
    callq collect
    jmp block_1

triple_start:
    movq %rdi, %rbx
    movq free_ptr(%rip), %rax
    movq %rax, -8(%r15)
    addq $32, -8(%r15)
    movq fromspace_end(%rip), %rax
    movq %rax, -16(%rbp)
    cmpq %rax, -8(%r15)
    jl block_2
    jmp block_3

    .globl triple
    .align 8

triple:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    movq $0, 0(%r15)
    addq $8, %r15
    jmp triple_start

triple_conclusion:
    subq $8, %r15
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq
