main_start:
    leaq ack(%rip), %rax
    movq %rax, -16(%rbp)
    callq read_int
    movq %rax, -8(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -8(%rbp), %rdi
    movq %rcx, %rsi
    callq *-16(%rbp)
    movq %rax, %rcx
    addq $41, %rax
    jmp main_conclusion

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    subq $16, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    jmp main_start

main_conclusion:
    addq $16, %rsp
    popq %rbp
    retq

ack_start:
    movq %rdi, -32(%rbp)
    movq %rsi, %rcx
    cmpq $0, -32(%rbp)
    je block_3
    jmp block_4

block_1:
    leaq ack(%rip), %rax
    movq %rax, -8(%rbp)
    movq -32(%rbp), %rcx
    subq $1, %rcx
    movq %rcx, %rdi
    movq $1, %rsi
    movq -8(%rbp), %rax
    addq $32, %rsp
    popq %rbp
    jmp *%rax

block_2:
    leaq ack(%rip), %rax
    movq %rax, -8(%rbp)
    movq -32(%rbp), %rax
    movq %rax, -16(%rbp)
    subq $1, -16(%rbp)
    leaq ack(%rip), %rax
    movq %rax, -24(%rbp)
    subq $1, %rcx
    movq -32(%rbp), %rdi
    movq %rcx, %rsi
    callq *-24(%rbp)
    movq %rax, %rcx
    movq -16(%rbp), %rdi
    movq %rcx, %rsi
    movq -8(%rbp), %rax
    addq $32, %rsp
    popq %rbp
    jmp *%rax

block_3:
    movq $1, %rax
    addq %rcx, %rax
    jmp ack_conclusion

block_4:
    cmpq $0, %rcx
    je block_1
    jmp block_2

    .globl ack
    .align 8

ack:
    pushq %rbp
    movq %rsp, %rbp
    subq $32, %rsp
    jmp ack_start

ack_conclusion:
    addq $32, %rsp
    popq %rbp
    retq
