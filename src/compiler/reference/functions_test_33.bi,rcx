(X86Program
  ((Def
     (Label main)
     (Finfo2
       (conflicts
         (((VarL $tmp.1)
           ((VarL $tmp.2) (RegL Rsp)))
          ((VarL $tmp.2)
           ((VarL $tmp.1)
            (RegL Rsp)
            (RegL Rax)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((VarL apply_1) ((RegL Rsp)))
          ((VarL even?) ((RegL Rsp)))
          ((RegL Rsp)
           ((VarL $tmp.1)
            (VarL $tmp.2)
            (VarL apply_1)
            (VarL even?)
            (RegL Rax)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)
            (RegL Rflags)))
          ((RegL Rax)
           ((VarL $tmp.2)
            (RegL Rsp)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((RegL Rcx)
           ((VarL $tmp.2) (RegL Rsp) (RegL Rax)))
          ((RegL Rdx)
           ((VarL $tmp.2) (RegL Rsp) (RegL Rax)))
          ((RegL Rsi)
           ((VarL $tmp.2) (RegL Rsp) (RegL Rax)))
          ((RegL Rdi)
           ((VarL $tmp.2) (RegL Rsp) (RegL Rax)))
          ((RegL R8)
           ((VarL $tmp.2) (RegL Rsp) (RegL Rax)))
          ((RegL R9)
           ((VarL $tmp.2) (RegL Rsp) (RegL Rax)))
          ((RegL R10)
           ((VarL $tmp.2) (RegL Rsp) (RegL Rax)))
          ((RegL R11)
           ((VarL $tmp.2) (RegL Rsp) (RegL Rax)))
          ((RegL Rflags) ((RegL Rsp))))))
     ((nparams 0)
      (locals
        (($tmp.1 Integer)
         ($tmp.2 (Function (Integer) Boolean))
         (apply_1 Boolean)
         (even? (Function (Integer) Boolean))))
      (body
        (((Label block_1)
          (Block
            Binfo1
            ((Movq (Imm 999) (Reg Rax))
             (Jmp (Label main_conclusion)))))
         ((Label block_2)
          (Block
            Binfo1
            ((Movq (Imm 42) (Reg Rax))
             (Jmp (Label main_conclusion)))))
         ((Label main_start)
          (Block
            Binfo1
            ((Leaq
               (GlobalArg (Label even?))
               (Var $tmp.2))
             (Callq (Label read_int) 0)
             (Movq (Reg Rax) (Var $tmp.1))
             (Movq (Var $tmp.1) (Reg Rdi))
             (IndirectCallq (Var $tmp.2) 1)
             (Movq (Reg Rax) (Var apply_1))
             (Cmpq (Imm 1) (Var apply_1))
             (JmpIf CC_e (Label block_1))
             (Jmp (Label block_2)))))))))
   (Def
     (Label even?)
     (Finfo2
       (conflicts
         (((VarL $tmp.3)
           ((VarL $tmp.5) (VarL x.1)))
          ((VarL $tmp.4)
           ((VarL $tmp.5) (VarL x.1)))
          ((VarL $tmp.5)
           ((VarL $tmp.3)
            (VarL $tmp.4)
            (VarL x.1)
            (RegL Rdi)))
          ((VarL odd?) ((RegL Rsp)))
          ((VarL x.1)
           ((VarL $tmp.3)
            (VarL $tmp.4)
            (VarL $tmp.5)
            (RegL Rsp)
            (RegL Rflags)))
          ((RegL Rsp)
           ((VarL odd?)
            (VarL x.1)
            (RegL Rax)
            (RegL Rflags)))
          ((RegL Rax) ((RegL Rsp)))
          ((RegL Rdi) ((VarL $tmp.5)))
          ((RegL Rflags) ((VarL x.1) (RegL Rsp))))))
     ((nparams 1)
      (locals
        ((x.1 Integer)
         ($tmp.3 Integer)
         ($tmp.4 Integer)
         ($tmp.5 (Function (Integer) Boolean))
         (odd? (Function (Integer) Boolean))
         (x.1 Integer)))
      (body
        (((Label block_3)
          (Block
            Binfo1
            ((Movq (Imm 1) (Reg Rax))
             (Jmp (Label even?_conclusion)))))
         ((Label block_4)
          (Block
            Binfo1
            ((Leaq
               (GlobalArg (Label odd?))
               (Var $tmp.5))
             (Movq (Imm 1) (Var $tmp.3))
             (Negq (Var $tmp.3))
             (Movq (Var $tmp.3) (Var $tmp.4))
             (Addq (Var x.1) (Var $tmp.4))
             (Movq (Var $tmp.4) (Reg Rdi))
             (TailJmp (Var $tmp.5) 1))))
         ((Label even?_start)
          (Block
            Binfo1
            ((Movq (Reg Rdi) (Var x.1))
             (Cmpq (Imm 0) (Var x.1))
             (JmpIf CC_e (Label block_3))
             (Jmp (Label block_4)))))))))
   (Def
     (Label odd?)
     (Finfo2
       (conflicts
         (((VarL $tmp.6)
           ((VarL $tmp.8) (VarL x.2)))
          ((VarL $tmp.7)
           ((VarL $tmp.8) (VarL x.2)))
          ((VarL $tmp.8)
           ((VarL $tmp.6)
            (VarL $tmp.7)
            (VarL x.2)
            (RegL Rdi)))
          ((VarL even?) ((RegL Rsp)))
          ((VarL x.2)
           ((VarL $tmp.6)
            (VarL $tmp.7)
            (VarL $tmp.8)
            (RegL Rsp)
            (RegL Rflags)))
          ((RegL Rsp)
           ((VarL even?)
            (VarL x.2)
            (RegL Rax)
            (RegL Rflags)))
          ((RegL Rax) ((RegL Rsp)))
          ((RegL Rdi) ((VarL $tmp.8)))
          ((RegL Rflags) ((VarL x.2) (RegL Rsp))))))
     ((nparams 1)
      (locals
        ((x.2 Integer)
         ($tmp.6 Integer)
         ($tmp.7 Integer)
         ($tmp.8 (Function (Integer) Boolean))
         (even? (Function (Integer) Boolean))
         (x.2 Integer)))
      (body
        (((Label block_5)
          (Block
            Binfo1
            ((Movq (Imm 0) (Reg Rax))
             (Jmp (Label odd?_conclusion)))))
         ((Label block_6)
          (Block
            Binfo1
            ((Leaq
               (GlobalArg (Label even?))
               (Var $tmp.8))
             (Movq (Imm 1) (Var $tmp.6))
             (Negq (Var $tmp.6))
             (Movq (Var $tmp.6) (Var $tmp.7))
             (Addq (Var x.2) (Var $tmp.7))
             (Movq (Var $tmp.7) (Reg Rdi))
             (TailJmp (Var $tmp.8) 1))))
         ((Label odd?_start)
          (Block
            Binfo1
            ((Movq (Reg Rdi) (Var x.2))
             (Cmpq (Imm 0) (Var x.2))
             (JmpIf CC_e (Label block_5))
             (Jmp (Label block_6)))))))))))
