block_1:
    movq free_ptr(%rip), %r11
    addq $24, free_ptr(%rip)
    movq $5, 0(%r11)
    movq %r11, %rcx
    movq $0, 8(%r11)
    movq $0, %rdx
    movq %rcx, %r11
    movq $41, 16(%r11)
    movq $0, %rdx
    movq %rbx, %rdi
    movq %rcx, %rsi
    callq *%r12
    movq %rax, %rcx
    movq %rcx, %r11
    movq 16(%r11), %rax
    jmp main_conclusion

block_2:
    movq $0, %rcx
    jmp block_1

block_3:
    movq %r15, %rdi
    movq $24, %rsi
    callq collect
    jmp block_1

main_start:
    leaq map_vec(%rip), %r12
    leaq add1(%rip), %rbx
    movq free_ptr(%rip), %rcx
    addq $24, %rcx
    movq fromspace_end(%rip), %rsi
    cmpq %rsi, %rcx
    jl block_2
    jmp block_3

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    jmp main_start

main_conclusion:
    popq %r12
    popq %rbx
    popq %rbp
    retq

block_4:
    movq free_ptr(%rip), %r11
    addq $24, free_ptr(%rip)
    movq $5, 0(%r11)
    movq %r11, %rdx
    movq %rbx, 8(%r11)
    movq $0, %rcx
    movq %rdx, %r11
    movq %r12, 16(%r11)
    movq $0, %rcx
    movq %rdx, %rax
    jmp map_vec_conclusion

block_5:
    movq $0, %rcx
    jmp block_4

block_6:
    movq %r15, %rdi
    movq $24, %rsi
    callq collect
    jmp block_4

map_vec_start:
    movq %rdi, %r12
    movq %rsi, -8(%r15)
    movq -8(%r15), %r11
    movq 8(%r11), %rcx
    movq %rcx, %rdi
    callq *%r12
    movq %rax, %rbx
    movq -8(%r15), %r11
    movq 16(%r11), %rcx
    movq %rcx, %rdi
    callq *%r12
    movq %rax, %r12
    movq free_ptr(%rip), %rcx
    addq $24, %rcx
    movq fromspace_end(%rip), %rdx
    cmpq %rdx, %rcx
    jl block_5
    jmp block_6

    .globl map_vec
    .align 8

map_vec:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    movq $0, 0(%r15)
    addq $8, %r15
    jmp map_vec_start

map_vec_conclusion:
    subq $8, %r15
    popq %r12
    popq %rbx
    popq %rbp
    retq

add1_start:
    movq %rdi, %rcx
    movq %rcx, %rax
    addq $1, %rax
    jmp add1_conclusion

    .globl add1
    .align 8

add1:
    pushq %rbp
    movq %rsp, %rbp
    jmp add1_start

add1_conclusion:
    popq %rbp
    retq
