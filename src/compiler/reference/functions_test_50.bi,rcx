(X86Program
  ((Def
     (Label main)
     (Finfo2
       (conflicts
         (((VarL $tmp.1)
           ((VarL $tmp.2)
            (VarL $tmp.3)
            (RegL Rax)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((VarL $tmp.2)
           ((VarL $tmp.1) (VarL $tmp.3) (RegL Rdi)))
          ((VarL $tmp.3)
           ((VarL $tmp.1)
            (VarL $tmp.2)
            (RegL Rax)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((VarL add1) ((RegL Rsp)))
          ((VarL twice) ((RegL Rsp)))
          ((RegL Rsp) ((VarL add1) (VarL twice)))
          ((RegL Rax)
           ((VarL $tmp.1)
            (VarL $tmp.3)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((RegL Rcx)
           ((VarL $tmp.1) (VarL $tmp.3) (RegL Rax)))
          ((RegL Rdx)
           ((VarL $tmp.1) (VarL $tmp.3) (RegL Rax)))
          ((RegL Rsi)
           ((VarL $tmp.1)
            (VarL $tmp.3)
            (RegL Rax)
            (RegL Rdi)))
          ((RegL Rdi)
           ((VarL $tmp.1)
            (VarL $tmp.2)
            (VarL $tmp.3)
            (RegL Rax)
            (RegL Rsi)))
          ((RegL R8)
           ((VarL $tmp.1) (VarL $tmp.3) (RegL Rax)))
          ((RegL R9)
           ((VarL $tmp.1) (VarL $tmp.3) (RegL Rax)))
          ((RegL R10)
           ((VarL $tmp.1) (VarL $tmp.3) (RegL Rax)))
          ((RegL R11)
           ((VarL $tmp.1) (VarL $tmp.3) (RegL Rax))))))
     ((nparams 0)
      (locals
        (($tmp.1 (Function (Integer) Integer))
         ($tmp.2 Integer)
         ($tmp.3
           (Function
             ((Function (Integer) Integer) Integer)
             Integer))
         (add1 (Function (Integer) Integer))
         (twice
           (Function
             ((Function (Integer) Integer) Integer)
             Integer))))
      (body
        (((Label main_start)
          (Block
            Binfo1
            ((Leaq
               (GlobalArg (Label twice))
               (Var $tmp.3))
             (Leaq
               (GlobalArg (Label add1))
               (Var $tmp.1))
             (Callq (Label read_int) 0)
             (Movq (Reg Rax) (Var $tmp.2))
             (Movq (Var $tmp.1) (Reg Rdi))
             (Movq (Var $tmp.2) (Reg Rsi))
             (TailJmp (Var $tmp.3) 2))))))))
   (Def
     (Label add1)
     (Finfo2
       (conflicts
         (((VarL y.1) ((RegL Rsp) (RegL Rax)))
          ((RegL Rsp) ((VarL y.1) (RegL Rax)))
          ((RegL Rax) ((VarL y.1) (RegL Rsp))))))
     ((nparams 1)
      (locals ((y.1 Integer) (y.1 Integer)))
      (body
        (((Label add1_start)
          (Block
            Binfo1
            ((Movq (Reg Rdi) (Var y.1))
             (Movq (Imm 1) (Reg Rax))
             (Addq (Var y.1) (Reg Rax))
             (Jmp (Label add1_conclusion)))))))))
   (Def
     (Label twice)
     (Finfo2
       (conflicts
         (((VarL $tmp.4)
           ((VarL $tmp.5)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((VarL $tmp.5)
           ((VarL $tmp.4) (RegL Rsp) (RegL Rax)))
          ((VarL f.1)
           ((VarL $tmp.4)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((VarL x.1)
           ((VarL $tmp.4)
            (VarL f.1)
            (RegL Rsp)
            (RegL Rax)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((RegL Rsp)
           ((VarL $tmp.4)
            (VarL $tmp.5)
            (VarL f.1)
            (VarL x.1)
            (RegL Rax)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((RegL Rax)
           ((VarL $tmp.4)
            (VarL $tmp.5)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rcx)
            (RegL Rdx)
            (RegL Rsi)
            (RegL Rdi)
            (RegL R8)
            (RegL R9)
            (RegL R10)
            (RegL R11)))
          ((RegL Rcx)
           ((VarL $tmp.4)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)))
          ((RegL Rdx)
           ((VarL $tmp.4)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)))
          ((RegL Rsi)
           ((VarL $tmp.4)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)))
          ((RegL Rdi)
           ((VarL $tmp.4)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)))
          ((RegL R8)
           ((VarL $tmp.4)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)))
          ((RegL R9)
           ((VarL $tmp.4)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)))
          ((RegL R10)
           ((VarL $tmp.4)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax)))
          ((RegL R11)
           ((VarL $tmp.4)
            (VarL f.1)
            (VarL x.1)
            (RegL Rsp)
            (RegL Rax))))))
     ((nparams 2)
      (locals
        ((f.1 (Function (Integer) Integer))
         (x.1 Integer)
         ($tmp.4 Integer)
         ($tmp.5 Integer)
         (f.1 (Function (Integer) Integer))
         (x.1 Integer)))
      (body
        (((Label twice_start)
          (Block
            Binfo1
            ((Movq (Reg Rdi) (Var f.1))
             (Movq (Reg Rsi) (Var x.1))
             (Movq (Var x.1) (Reg Rdi))
             (IndirectCallq (Var f.1) 1)
             (Movq (Reg Rax) (Var $tmp.4))
             (Movq (Var x.1) (Reg Rdi))
             (IndirectCallq (Var f.1) 1)
             (Movq (Reg Rax) (Var $tmp.5))
             (Movq (Var $tmp.4) (Reg Rax))
             (Addq (Var $tmp.5) (Reg Rax))
             (Jmp (Label twice_conclusion)))))))))))
