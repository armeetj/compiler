block_1:
    movq free_ptr(%rip), %r11
    addq $24, free_ptr(%rip)
    movq $5, 0(%r11)
    movq %r11, -8(%r15)
    movq $0, 8(%r11)
    movq $0, -32(%rbp)
    movq -8(%r15), %r11
    movq $41, 16(%r11)
    movq $0, -32(%rbp)
    movq %rbx, %rdi
    movq -8(%r15), %rsi
    callq *-24(%rbp)
    movq %rax, %rbx
    movq %rbx, %r11
    movq 16(%r11), %rax
    jmp main_conclusion

block_2:
    movq $0, -8(%r15)
    jmp block_1

block_3:
    movq %r15, %rdi
    movq $24, %rsi
    callq collect
    jmp block_1

main_start:
    leaq map_vec(%rip), %rax
    movq %rax, -24(%rbp)
    leaq add1(%rip), %rbx
    movq free_ptr(%rip), %rax
    movq %rax, -8(%r15)
    addq $24, -8(%r15)
    movq fromspace_end(%rip), %rax
    movq %rax, -16(%rbp)
    cmpq %rax, -8(%r15)
    jl block_2
    jmp block_3

    .globl main
    .align 8

main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    movq $65536, %rdi
    movq $65536, %rsi
    callq initialize
    movq rootstack_begin(%rip), %r15
    movq $0, 0(%r15)
    addq $8, %r15
    jmp main_start

main_conclusion:
    subq $8, %r15
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq

block_4:
    movq free_ptr(%rip), %r11
    addq $24, free_ptr(%rip)
    movq $5, 0(%r11)
    movq %r11, -8(%r15)
    movq %rbx, 8(%r11)
    movq $0, %rbx
    movq -8(%r15), %r11
    movq -16(%rbp), %rax
    movq %rax, 16(%r11)
    movq $0, %rbx
    movq -8(%r15), %rax
    jmp map_vec_conclusion

block_5:
    movq $0, -24(%rbp)
    jmp block_4

block_6:
    movq %r15, %rdi
    movq $24, %rsi
    callq collect
    jmp block_4

map_vec_start:
    movq %rdi, -16(%rbp)
    movq %rsi, -32(%rbp)
    movq -32(%rbp), %r11
    movq 8(%r11), %rbx
    movq %rbx, %rdi
    callq *-16(%rbp)
    movq %rax, %rbx
    movq -32(%rbp), %r11
    movq 16(%r11), %rax
    movq %rax, -24(%rbp)
    movq -24(%rbp), %rdi
    callq *-16(%rbp)
    movq %rax, -16(%rbp)
    movq free_ptr(%rip), %rax
    movq %rax, -24(%rbp)
    addq $24, -24(%rbp)
    movq fromspace_end(%rip), %rax
    movq %rax, -32(%rbp)
    cmpq %rax, -24(%rbp)
    jl block_5
    jmp block_6

    .globl map_vec
    .align 8

map_vec:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $24, %rsp
    movq $0, 0(%r15)
    addq $8, %r15
    jmp map_vec_start

map_vec_conclusion:
    subq $8, %r15
    addq $24, %rsp
    popq %rbx
    popq %rbp
    retq

add1_start:
    movq %rdi, %rbx
    movq %rbx, %rax
    addq $1, %rax
    jmp add1_conclusion

    .globl add1
    .align 8

add1:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    subq $8, %rsp
    jmp add1_start

add1_conclusion:
    addq $8, %rsp
    popq %rbx
    popq %rbp
    retq
